#!/usr/bin/with-contenv bash

FROZEN_DIR="${FTAG_DIR:-/frozen}"
CONF_FILE='/config/qBittorrent/qBittorrent.conf'
CATEG_FILE="/config/qBittorrent/categories.json"
CATEGORY="${FTAG_DL_CATEGORY}"
CATEGORY_FZ="${FTAG_FZ_CATEGORY:-${CATEGORY}_frozen}"

log() {
    echo "[mod-freezetag] INFO: ${1}" >&2
}
log_error() {
    echo "[mod-freezetag] ERROR: ${1}" >&2
}
log_debug() {
    if [ "${DOCKER_MODS_DEBUG,,}" = 'true' ]; then
        echo "[mod-freezetag] DEBUG: ${1}" >&2
    fi
}

# Check if DOCKER_MODS_DEBUG is set and true
log_debug "Starting svc-qbittorrent-freezetag..."

# Check if the FROZEN_DIR is empty
if [ ! -z "$(find ${FROZEN_DIR} -mindepth 1 -print -quit)" ]; then
    log_error "The FROZEN_DIR (${FROZEN_DIR}) is not empty."
    log "Contents of ${FROZEN_DIR}:"
    ls -l "${FROZEN_DIR}" >&2
    exit 1
fi


inject_autorun_script() {
  # This injects the script that will run on torrent completion.
  local TEMP_FILE=$(mktemp)
  local CUSTOM_CMD="/mod-qbittorrent-freezetag-scripts/freeze.sh %L %D"
  local changes_made=false

  if grep -q "^\[AutoRun\]" "$CONF_FILE"; then
      log_debug "Found [AutoRun] section in $CONF_FILE"
      # Modify the [AutoRun] section
      awk -v custom_cmd="$CUSTOM_CMD" '
      BEGIN { 
          in_autorun = 0; 
          cmd_present = 0; 
      }
      /^\[AutoRun\]/ { 
          in_autorun = 1; 
          print; 
          next; 
      }
      in_autorun && /^program=/ {
          # Check if the custom command is already present
          if ($0 ~ custom_cmd) {
              cmd_present = 1;
              print $0;
              # print "Custom command already present in program= line.";
          } else {
              # Append custom command with &&
              $0 = $0 " && " custom_cmd;
              print $0;
              print "Modified program= line to include custom command.";
          }
          next;
      }
      in_autorun && /^enabled=/ {
          # Ensure enabled is true
          if ($0 != "enabled=true") {
              $0 = "enabled=true";
              print $0;
              # print "Updated enabled= line to true.";
          } else {
              # print "enabled= line is already set to true.";
              print $0;
          }
          next;
      }
      in_autorun && /^[^[]/ { 
          in_autorun = 0; 
      } # End of [AutoRun] section
      { print }
      ' "$CONF_FILE" > "$TEMP_FILE"

      changes_made=true
  else
      log_error "Could not find [AutoRun] section in $CONF_FILE"
      return 1
  fi

  if $changes_made; then
      log_debug "Changes detected in [AutoRun] section:"
      diff "$CONF_FILE" "$TEMP_FILE" | sed 's/^/    /'
  else
      log_debug "No changes made to [AutoRun] section."
  fi

  # Replace the original config file with the modified one
  log_debug "Injecting autorun script into $CONF_FILE"
  log_debug "Old permissions: $(stat -c %a $CONF_FILE)"
  log_debug "Old owner: $(stat -c %U:%G $CONF_FILE)"
  mv "$TEMP_FILE" "$CONF_FILE"
  log_debug "New permissions: $(stat -c %a $CONF_FILE)"
  log_debug "New owner: $(stat -c %U:%G $CONF_FILE)"
  log_debug "Reading new $CONF_FILE:"
  log_debug "$(cat $CONF_FILE)"

  # Clean up temporary file
  rm -f "$TEMP_FILE"
}

init_checks(){
  # Enable or not init_checks
  if [ "${FTAG_SKIP_INIT_CHECKS,,}" = 'true' ]; then
    return 0
  fi


  ## Check 1 :
  # Check that the FROZEN_DIR exists
  if [ ! -d "${FROZEN_DIR}" ]; then
    err='true'
    log_error "The FROZEN_DIR (${FROZEN_DIR}) does not exist."
  fi

  # Check 2 :
  # Check that it is empty
  if [ ! -z "$(find ${FROZEN_DIR} -mindepth 1 -print -quit)" ]; then
    err='true'
    log_error "The FROZEN_DIR (${FROZEN_DIR}) is not empty."
  fi

  ## Check 3 :
  # Check that the categories.json file exists
  if [ ! -f "${CATEG_FILE}" ]; then
    err='true'
    log_error "categories.json (${CATEG_FILE}) does not exist."
  fi

  ## Check 4 :
  # Check that the required category exists
  SAVE_PATH=$(jq -r --arg category "$CATEGORY" '.[$category].save_path // empty' "$CATEG_FILE")
  if [ -n "$SAVE_PATH" ]; then
    log_debug "Category: $CATEGORY"
  else
    log_error "'$CATEGORY' is not a valid category."
  fi

  ## Check 5
  # Check that the category path exists
  if [ ! -d "$SAVE_PATH" ]; then
    log_error "The category path '$SAVE_PATH' does not exist."
  fi

  # Display Check results.
  # In case of failed checks, enter an empty loop : 
  #   -> exiting the script would make s6-overlay to re-run it.
  if [ -n "${err}" ];then
    log_error "Init checks failed, exiting the mod. You can disable init checks by setting \"FTAG_SKIP_INIT_CHECKS=true\"."
    while :; do
      sleep 3600
    done
  else
    log "Init checks passed."
  fi
}

## 

# Create the freeze folder if it doesn't exist
if [ ! -d "${FROZEN_DIR}" ]; then
  log_debug "The FROZEN_DIR (${FROZEN_DIR}) does not exist. Creating it..."
  mkdir -p "${FROZEN_DIR}"
  if [ $? -ne 0 ]; then
    log_error "Failed to create the FROZEN_DIR (${FROZEN_DIR})."
    exit 1
  fi

  if [[ -z ${LSIO_NON_ROOT_USER} ]]; then
    # chown download directory if currently not set to abc
    lsiown -R abc:abc \
      /$FROZEN_DIR
    log_debug "Setting owner of FROZEN_DIR (${FROZEN_DIR}) to abc:abc"
  fi
fi

init_checks
inject_autorun_script

# Get Category path
CATEGORY_DIR=$(jq -r --arg category "$CATEGORY" '.[$category].save_path' "$CATEG_FILE")


spaces='                                                            '
CAT_display="${CATEGORY}${spaces}"
CAT_FZ_display="${CATEGORY_FZ}${spaces}"
CAT_DIR_display="${CATEGORY_DIR}${spaces}"
FRO_DIR_display="${FROZEN_DIR}${spaces}"
if [ -z "${FTAG_UMASK}" ]; then
    CAT_UMASK_display="unset${spaces}"
else
    CAT_UMASK_display="${FTAG_UMASK}${spaces}"
fi
echo "\
+---------------------------------------------------------+
|                     Freezetag mod loaded                |
+---------------------------------------------------------+
|  Download  category  : ${CAT_display::33}|
|  Frozen  category    : ${CAT_FZ_display::33}|
|  Category directory  : ${CAT_DIR_display::33}|
|  Frozen directory    : ${FRO_DIR_display::33}|
|  Category UMASK      : ${CAT_UMASK_display::33}|
+---------------------------------------------------------+
"

exec \
    s6-notifyoncheck -d -n 300 -w 1000 -c "mountpoint -q ${FROZEN_DIR}" \
        freezetag mount \
        --uid "${PUID}" \
        --gid "${PGID}" \
        "${CATEGORY_DIR}" \
        "${FROZEN_DIR}"